AWSTemplateFormatVersion: 2010-09-09
Description: |
  AWS CloudFormation Template to deploy the following resources to create a One-Time Download API:
  
  1. Encrypted S3 bucket to store downloadable file and codebank file with list of valid/expired download codes
  2. API Gateway REST API with public endpoint that listens for incoming requests and forwards to Python script
  3. API Gateway REST API with IAM user-restricted endpoint to add new codes to codebank upon game purchase 
  4. Lambda function (Python script) to check codebank against provided code
  5. Lambda function to generate new random code and add to codebank

  Last Updated: 7/12/22


Parameters:
  AddCodeIamUserName: 
    Type: String
    Description: Name of IAM user allowed to call the AddCode API

  CheckCodeApiBurstLimit:
    Type: Number
    Description: Number of concurrent requests allowed to API before sending 429 Too Many Requests
    Default: 10

  CheckCodeApiRateLimit:
    Type: Number
    Description: Number of requests per second allowed to API before sending 429 Too Many Requests
    Default: 10

  PathName:
    Type: String 
    Description: Text shown in URL path for API (cannot be empty) - E.g. ...com/{pathname}/<version>/<code>
    Default: v1

  ResourceSuffix:
    Type: String
    Description: Suffix for API resource names to prevent issues recreating stack, random phrase
    Default: "hawkeye"



Outputs:
  CheckCodeApiUrl:
    Description: URL of CheckCode API
    Value: !Sub https://${CheckCodeApi}.execute-api.${AWS::Region}.amazonaws.com/${PathName}/
  
  AddCodeApiUrl:
    Description: URL of AddCode API
    Value: !Sub https://${AddCodeApi}.execute-api.${AWS::Region}.amazonaws.com/${PathName}/



Resources:
  AddCodeIamUser:
    Type: AWS::IAM::User
    Properties:
      UserName: !Sub ${AddCodeIamUserName}-${ResourceSuffix}
      # Policies:
      # - PolicyName: !Sub AddCodeIamUserPolicy-${ResourceSuffix}
      #   PolicyDocument:
      #     Version: '2012-10-17'
      #     Statement:
      #     - Effect: Allow
      #       Action:
      #         - "execute-api:Invoke"
      #       Resource:
      #         - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AddCodeApi}/*/GET/*"

  AddCodeIamPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
            - "execute-api:Invoke"
          Resource:
            - !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AddCodeApi}/*/GET/*"
      PolicyName: !Sub AddCodeIamUserPolicy-${ResourceSuffix}
      Users: 
        - !Ref AddCodeIamUser


  AddCodeApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub add-code-api-${ResourceSuffix}
      BinaryMediaTypes: 
        - "*~1*"
      Description: API to generate and add one-time code to codebank S3 bucket
      EndpointConfiguration: 
        Types:
          - REGIONAL
      ## Implicit deny for all but expected IAM user
      Policy:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:user/${AddCodeIamUserName}-${ResourceSuffix}"
          Action:
          - "execute-api:Invoke"
          Resource:
          - "execute-api:/*"
    DependsOn: AddCodeIamUser


  AddCodeApiResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt 
        - AddCodeApi
        - RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref AddCodeApi

  
  AddCodeApiMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-    ## yes this date should be hardcoded, from docs
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddCodeLambdaFunction.Arn}/invocations
      ResourceId: !Ref AddCodeApiResource
      RestApiId: !Ref AddCodeApi



  AddCodeApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref AddCodeApi
      StageName: !Ref PathName
    DependsOn: AddCodeApiMethod
    
  
  AddCodeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AddCodeLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AddCodeApi}/*/GET/*




  CheckCodeApi:
    Type: AWS::ApiGateway::RestApi
    ## No resource policy, public API
    Properties:
      Name: !Sub check-code-api-${ResourceSuffix}
      BinaryMediaTypes: 
        - "*~1*"
      Description: API to validate one-time code
      EndpointConfiguration: 
        Types:
          - REGIONAL


  CheckCodeApiResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt 
        - CheckCodeApi
        - RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref CheckCodeApi

  
  CheckCodeApiMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      AuthorizationType: NONE
      HttpMethod: GET
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckCodeLambdaFunction.Arn}/invocations
      ResourceId: !Ref CheckCodeApiResource
      RestApiId: !Ref CheckCodeApi



  CheckCodeApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref CheckCodeApi
      StageName: !Ref PathName
      StageDescription:
        ThrottlingBurstLimit: !Ref CheckCodeApiBurstLimit
        ThrottlingRateLimit: !Ref CheckCodeApiRateLimit
    DependsOn: CheckCodeApiMethod
    
  
  CheckCodeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CheckCodeLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CheckCodeApi}/*/GET/*


  OneTimeCodeS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub codebank-${ResourceSuffix}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: False 
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Basic Execution role for Lambda
      Policies: 
        - PolicyName: !Sub lambda-logging-${ResourceSuffix}
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow 
              Action:
              - "logs:CreateLogGroup"
              Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
            - Effect: Allow 
              Action:
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
        - PolicyName: codebank-s3-perms
          PolicyDocument: 
            Version: '2012-10-17'
            Statement:
            - Effect: Allow 
              Action:
              - "s3:ListBucket"
              Resource:
              - !GetAtt OneTimeCodeS3Bucket.Arn
            - Effect: Allow 
              Action:
              - "s3:GetObject"
              Resource:
              - !Sub ${OneTimeCodeS3Bucket.Arn}/*-codebank.json
            - Effect: Allow 
              Action:
              - "s3:PutObject"
              Resource:
              - !Sub ${OneTimeCodeS3Bucket.Arn}/*-codebank.json
      RoleName: !Sub LambdaIamRole-${ResourceSuffix}



  CheckCodeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
      Description: Implement One-Time Code Validation logic
      Timeout: 15
      Environment:
        Variables:
          download_bucket: !Ref OneTimeCodeS3Bucket
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError
          import os, json, logging



          INVALID_DOWNLOAD_CODE = {
              "statusCode": 403,
              "body": "Invalid download code."
          }

          EXPIRED_DOWNLOAD_CODE = {
              "statusCode": 405,
              "body": "Expired download code."
          }

          VALID_DOWNLOAD_CODE = {
              "statusCode": 201,
              "body": "Valid download code."
          }

          UNKNOWN_ROUTE = {
              "statusCode": 404,
              "body": "Not found"
          }

          UNKNOWN_ERROR = {
              "statusCode": 503,
              "body": "Internal failure."
          }


          CODEBANK_FILE_SUFFIX = 'codebank.json'


          ## Wrapper around AWS library methods to read/write to/from file in storage using provided API client
          ## If no codebank exists (first execution), create new one
          ## Returns codebank if action == read, otherwise False
          ## If action == write, returns True or False depending on success
          def read_write_codebank(action, s3_object, codebank_data=None):

              if action == 'read':
                  ## Get object from storage
                  try:
                      res = s3_object.get()
                      file_content = res['Body'].read().decode('utf-8')
                      logging.info('Successfully retrieved codebank from storage')

                  except ClientError as e:
                      logging.error(f'Could not retrieve codebank, exiting: {e}')
                      return False
                  
                  ## Load object content
                  try:
                      codebank = json.loads(file_content)
                      logging.info('Successfully parsed codebank')
                      return codebank

                  except:
                      logging.error('Could not read codebank, exiting')
                      return False


              elif action == 'write':
                  ## Write object back to storage
                  try:
                      s3_object.put(
                          Body=(bytes(json.dumps(codebank_data).encode('utf-8')))
                      )
                      logging.info('Successfully wrote updated codebank to storage')
                      return True

                  except ClientError as e:
                      logging.error(f'Could not write codebank to storage, exiting: {e}')
                      return False



          ## Changes codebank code from unused to expired, 
          ## Returns False if code already expired, otherwise updated codebank
          def expire_used_code(codebank, code):
              if code in codebank['expired_codes']:
                  logging.info(f'Code {code} is already expired, aborting')
                  return False

              codebank['expired_codes'].append(code)
              codebank['unused_codes'].remove(code)
              logging.info(f'Changing code {code} to expired')
              return codebank



          ## Checks provided code against unused_codes in codebank and sets value to expired if match
          ## Returns appropriate HTTP response for given code
          def check_code(input_code, codebank_object):
              codebank = read_write_codebank('read', codebank_object)

              if input_code in codebank['expired_codes']:
                  return EXPIRED_DOWNLOAD_CODE

              if input_code in codebank['unused_codes']:
                  updated_codebank = expire_used_code(codebank, input_code)

                  if not updated_codebank:
                      return UNKNOWN_ERROR

                  read_write_codebank('write', codebank_object, codebank_data=updated_codebank)
                  return VALID_DOWNLOAD_CODE

              return INVALID_DOWNLOAD_CODE



          ## Example API usage: <apidomain>.amazonaws.com/12345 to validate code '12345'
          ##
          ## Codebank format: {'unused_codes': [], 'expired_codes': []}
          def lambda_handler(event, _):
              logging.getLogger().setLevel(logging.INFO)

              logging.info(f'Invoked CheckCode API with event: {event}')

              ## Expected path: /<version>/<inputcode>
              path = event['path']
              try:
                  version, input_code = path.split('/')[1:] ## strip off leading /
              except:
                  logging.error(f'Received unexpected URL path, exiting: {path}')
                  return UNKNOWN_ROUTE

              ## Get environment variables needed for script
              try:
                  bucket = os.environ['download_bucket']
              except:
                  logging.error('Could not retrieve environment variables needed for script, exiting')
                  return UNKNOWN_ERROR
              

              ## Create AWS storage API client with Lambda user creds to interact with codebank/game files
              codebank_name = f'{version}-{CODEBANK_FILE_SUFFIX}'
              try:
                  s3 = boto3.resource('s3')
                  codebank_object = s3.Object(bucket, codebank_name)

              except ClientError as e:
                  logging.error(f'Could not create S3 bucket resource using IAM role, exiting: {e}')
                  return UNKNOWN_ERROR

              ## If path and API client are good, check input code
              http_response = check_code(input_code, codebank_object)
              logging.info(f'Sending HTTP response {http_response}, script complete.')
              return http_response




  AddCodeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
      Description: Implement generation and adding of new codes to codebank
      Timeout: 25
      Environment:
        Variables:
          download_bucket: !Ref OneTimeCodeS3Bucket
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import ClientError
          import os, json, logging
          from secrets import randbelow


          UNKNOWN_ERROR = {
              "statusCode": 503,
              "body": "Internal failure"
          }

          UNKNOWN_ROUTE = {
              "statusCode": 404,
              "body": "Not found"
          }

          SUCCESS_CODE_ADD = {
              "statusCode": 200,
              "body": ""
          }

          CODE_LENGTH = 20
          CODEBANK_FILE_SUFFIX = 'codebank.json'


          ## Wrapper around AWS library methods to read/write to/from file in storage using provided API client
          ## If no codebank exists (first execution), create new one
          ## Returns codebank if action == read, otherwise False
          ## If action == write, returns True or False depending on success
          def read_write_codebank(action, s3_object, codebank_data=None):

              if action == 'read':
                  ## Get object from storage
                  try:
                      res = s3_object.get()
                      file_content = res['Body'].read().decode('utf-8')
                      logging.info('Successfully retrieved codebank from storage')

                  except ClientError as e:
                      if e.response['Error']['Code'] == 'NoSuchKey':
                          logging.info('First-time setup detected, creating empty codebank')
                          file_content = '{"unused_codes": [], "expired_codes": []}'
                      else:
                          logging.error(f'Could not retrieve codebank, exiting: {e}')
                          return False
                  
                  ## Load object content
                  try:
                      codebank = json.loads(file_content)
                      logging.info('Successfully parsed codebank')
                      return codebank

                  except:
                      logging.error('Could not read codebank, exiting')
                      return False


              elif action == 'write':
                  ## Write object back to storage
                  try:
                      s3_object.put(
                          Body=(bytes(json.dumps(codebank_data).encode('utf-8')))
                      )
                      logging.info('Successfully wrote updated codebank to storage')
                      return True

                  except ClientError as e:
                      logging.error(f'Could not write codebank to storage, exiting: {e}')
                      return False



          def generate_random_code():
              charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
              charset += 'abcdefghijklmnopqrstuvwxyz'
              charset += '0123456789'
              charset += '_-'
              charset = list(charset)
              
              num_chars = len(charset)
              code = ''

              for _ in range(CODE_LENGTH):
                  idx = randbelow(num_chars)
                  code += charset[idx]

              return code



          ## Adds new code to codebank and saves to storage
          ## Returns HTTP response based on success
          def add_new_code(codebank_object):

              codebank = read_write_codebank('read', codebank_object)
              if not codebank:
                  return UNKNOWN_ERROR

              ## Generate random code value that doesn't already exist in codebank
              existing_code = True
              while existing_code:
                  new_code = generate_random_code()

                  if new_code in codebank['expired_codes'] or new_code in codebank['unused_codes']:
                      logging.info(f'Generated previously seen code {new_code}, trying again...')

                  else:
                      logging.info(f'Generated new valid code {new_code}')
                      existing_code = False
                  

              ## Add new code to codebank and save
              codebank['unused_codes'].append(new_code)
              logging.info(f'Successfully added new code {new_code} to codebank')

              successful_write = read_write_codebank('write', codebank_object, codebank_data=codebank)
              if not successful_write:
                  return UNKNOWN_ERROR


              ## Provide new code back in response
              SUCCESS_CODE_ADD['body'] = new_code
              return SUCCESS_CODE_ADD




          ## Example API usage: <apidomain>.amazonaws.com/generate_code
          ##
          ## Codebank format: {'unused_codes': [], 'expired_codes': []}
          def lambda_handler(event, _):
              logging.getLogger().setLevel(logging.INFO)

              logging.info(f'Invoked AddCode API with event: {event}')

              ## Expected path: /<version>/generate_code
              path = event['path']
              try:
                  version, action = path.split('/')[1:] ## strip off leading /
                  if action != 'generate_code':
                      return UNKNOWN_ROUTE
              except:
                  logging.error(f'Received unexpected URL path, exiting: {path}')
                  return UNKNOWN_ROUTE

              ## Get environment variables needed for script
              try:
                  bucket = os.environ['download_bucket']
              except:
                  logging.error('Could not retrieve environment variables needed for script, exiting')
                  return UNKNOWN_ERROR

              ## Create AWS storage API client with Lambda user creds to interact with codebank/game files
              codebank_name = f'{version}-{CODEBANK_FILE_SUFFIX}'
              try:
                  s3 = boto3.resource('s3')
                  codebank_object = s3.Object(bucket, codebank_name)
              except ClientError as e:
                  logging.error(f'Could not create S3 API client using IAM role, exiting: {e}')
                  return UNKNOWN_ERROR

              ## If path and API client are good, time to generate and save code
              return add_new_code(codebank_object)